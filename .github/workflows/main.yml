{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LoliKillers/katacoda-scenarios/blob/master/Welcome_To_Colaboratory.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LuagUgWgdvut"
      },
      "source": [
        "# **Colab RDP** : Desktop Jarak Jauh ke Instance Colab\n",
        "> **Peringatan : Bukan untuk Penambangan Cryptocurrency<br></br>** >**Mengapa sumber daya perangkat keras seperti GPU T4 tidak tersedia untuk saya?** Perangkat keras terbaik yang tersedia diprioritaskan untuk pengguna yang menggunakan Colaboratory secara interaktif daripada untuk komputasi yang berjalan lama. Pengguna yang menggunakan Colaboratory untuk komputasi yang berjalan lama mungkin akan dibatasi sementara dalam jenis perangkat keras yang disediakan untuk mereka, dan/atau durasi penggunaan perangkat keras tersebut. Kami mendorong pengguna dengan kebutuhan komputasi tinggi untuk menggunakan UI Colaboratory dengan runtime lokal. Harap diperhatikan bahwa penggunaan Colaboratory untuk penambangan mata uang kripto dilarang sepenuhnya, dan dapat mengakibatkan larangan menggunakan Colab sama sekali. Google Colab dapat memberi Anda Instance dengan RAM dan GPU 12 GB selama 12 jam (Maks.) untuk pengguna Gratis. Siapa pun dapat menggunakannya untuk melakukan Tugas Berat. Untuk menggunakan Notebook serupa lainnya, gunakan Repositori saya **[Colab Loli](https://github.com/LoliKillers/Colab-Loli)**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "cellView": "form",
        "id": "M3ElIBMTd7OQ"
      },
      "source": [
        "#@title **Buat User**\n",
        "#@markdown Masukkan Username dan Password\n",
        "\n",
        "import os\n",
        "\n",
        "username = \"user\" #@param {type:\"string\"}\n",
        "password = \"root\" #@param {type:\"string\"}\n",
        "\n",
        "print(\"Membuat User dan mengaturnya\")\n",
        "\n",
        "# Membuat user\n",
        "os.system(f\"useradd -m {username}\")\n",
        "\n",
        "# Menambahkan user ke pengguna group sudo\n",
        "os.system(f\"adduser {username} sudo\")\n",
        "    \n",
        "# Membuat password untuk pengguna 'root'\n",
        "os.system(f\"echo '{username}:{password}' | sudo chpasswd\")\n",
        "\n",
        "# Ubah shell default dari sh ke bash\n",
        "os.system(\"sed -i 's/\\/bin\\/sh/\\/bin\\/bash/g' /etc/passwd\")\n",
        "\n",
        "print(\"User success di buat dan di konfigurasi\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "cellView": "form",
        "id": "7755_ubxeEkK"
      },
      "source": [
        "#@title **RDP**\n",
        "#@markdown  Membutuhkan waktu 4-5 menit untuk installation\n",
        "\n",
        "import os\n",
        "import subprocess\n",
        "\n",
        "#@markdown  Kunjungi http://remotedesktop.google.com/headless dan Salin command debian linux setelah otentikasi\n",
        "\n",
        "CRP = \"\" #@param {type:\"string\"}\n",
        "\n",
        "#@markdown Masukkan pin 6 digit atau lebih\n",
        "Pin = 123456 #@param {type: \"integer\"}\n",
        "\n",
        "\n",
        "class CRD:\n",
        "    def __init__(self):\n",
        "        os.system(\"apt update\")\n",
        "        self.installCRD()\n",
        "        self.installDesktopEnvironment()\n",
        "        self.installGoogleChorme()\n",
        "        self.finish()\n",
        "\n",
        "    @staticmethod\n",
        "    def installCRD():\n",
        "        print(\"Memasang Chrome Remote Desktop\")\n",
        "        subprocess.run(['wget', 'https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb'], stdout=subprocess.PIPE)\n",
        "        subprocess.run(['dpkg', '--install', 'chrome-remote-desktop_current_amd64.deb'], stdout=subprocess.PIPE)\n",
        "        subprocess.run(['apt', 'install', '--assume-yes', '--fix-broken'], stdout=subprocess.PIPE)\n",
        "\n",
        "    @staticmethod\n",
        "    def installDesktopEnvironment():\n",
        "        print(\"Memasang Desktop Environment\")\n",
        "        os.system(\"export DEBIAN_FRONTEND=noninteractive\")\n",
        "        os.system(\"apt install --assume-yes xfce4 desktop-base xfce4-terminal\")\n",
        "        os.system(\"bash -c 'echo \\\"exec /etc/X11/Xsession /usr/bin/xfce4-session\\\" > /etc/chrome-remote-desktop-session'\")\n",
        "        os.system(\"apt remove --assume-yes gnome-terminal\")\n",
        "        os.system(\"apt install --assume-yes xscreensaver\")\n",
        "        os.system(\"systemctl disable lightdm.service\")\n",
        "\n",
        "    @staticmethod\n",
        "    def installGoogleChorme():\n",
        "        print(\"Memasang Google Chrome\")\n",
        "        subprocess.run([\"wget\", \"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"], stdout=subprocess.PIPE)\n",
        "        subprocess.run([\"dpkg\", \"--install\", \"google-chrome-stable_current_amd64.deb\"], stdout=subprocess.PIPE)\n",
        "        subprocess.run(['apt', 'install', '--assume-yes', '--fix-broken'], stdout=subprocess.PIPE)\n",
        "\n",
        "    @staticmethod\n",
        "    def finish():\n",
        "        print(\"Penyelesaian\")\n",
        "        os.system(f\"adduser {username} chrome-remote-desktop\")\n",
        "        command = f\"{CRP} --pin={Pin}\"\n",
        "        os.system(f\"su - {username} -c '{command}'\")\n",
        "        os.system(\"service chrome-remote-desktop start\")\n",
        "        print(\"Success, semua sudah dibuat dan silahkan buka Chrome Remote Desktop\")\n",
        "\n",
        "\n",
        "try:\n",
        "    if username:\n",
        "        if CRP == \"\":\n",
        "            print(\"Silakan masukkan kode auth dari tautan yang saya berikan\")\n",
        "        elif len(str(Pin)) < 6:\n",
        "            print(\"Harap massukkan pin paling minim 6 digit\")\n",
        "        else:\n",
        "            CRD()\n",
        "except NameError as e:\n",
        "    print(\"Error : variable username kosong\")\n",
        "    print(\"Buat user terlebih dahulu!\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "cellView": "form",
        "id": "1H9544T8eQmU"
      },
      "source": [
        "#@title **Google Drive Mount**\n",
        "#@markdown Google Drive digunakan sebagai HDD Persistensi untuk file.<br>\n",
        "#@markdown Dipasang di direktori Home `user` di dalam folder drive\n",
        "#@markdown (Jika variabel `username` tidak di isi maka gunakan root sebagai default).\n",
        "\n",
        "\n",
        "def MountGDrive():\n",
        "    from os import environ as env\n",
        "    from google.colab import drive\n",
        "\n",
        "    config = env['CLOUDSDK_CONFIG']\n",
        "    addr = env['TBE_CREDS_ADDR']\n",
        "\n",
        "    ! runuser -l $user -c \"yes | python3 -m pip install --user google-colab\"  > /dev/null 2>&1\n",
        "\n",
        "    mount = \"\"\"from os import environ as env\n",
        "from google.colab import drive\n",
        "\n",
        "env['CLOUDSDK_CONFIG']  = '{config}'\n",
        "env['TBE_CREDS_ADDR'] = '{addr}'\n",
        "\n",
        "drive.mount('{mountpoint}')\"\"\".format(config=config, addr=addr, mountpoint=mountpoint)\n",
        "\n",
        "    with open('/content/mount.py', 'w') as script:\n",
        "        script.write(mount)\n",
        "\n",
        "    ! runuser -l $user -c \"python3 /content/mount.py\"\n",
        "\n",
        "try:\n",
        "    mountpoint = f\"/home/{username}/drive\"\n",
        "    user = username\n",
        "except NameError:\n",
        "    print(\"Variable `username` kosong, pemasangan di `/content/drive' menggunakan `root'\")\n",
        "    mountpoint = '/content/drive'\n",
        "    user = 'root'\n",
        "\n",
        "MountGDrive()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "cellView": "form",
        "id": "n4JfyQSreZcI"
      },
      "source": [
        "#@title **SSH**\n",
        "\n",
        "! pip install colab_ssh --upgrade &> /dev/null\n",
        "\n",
        "Ngrok = False #@param {type:'boolean'}\n",
        "Agro = False #@param {type:'boolean'}\n",
        "\n",
        "\n",
        "#@markdown Copy authtoken dari https://dashboard.ngrok.com/auth (harus dari ngrok)\n",
        "ngrokToken = \"\" #@param {type:'string'}\n",
        "\n",
        "\n",
        "def runNGROK():\n",
        "    from colab_ssh import launch_ssh\n",
        "    from IPython.display import clear_output\n",
        "    launch_ssh(ngrokToken, password)\n",
        "    clear_output()\n",
        "\n",
        "    print(\"ssh\", username, end='@')\n",
        "    ! curl -s http://localhost:4040/api/tunnels | python3 -c \\\n",
        "            \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'][6:].replace(':', ' -p '))\"\n",
        "\n",
        "\n",
        "def runAgro():\n",
        "    from colab_ssh import launch_ssh_cloudflared\n",
        "    launch_ssh_cloudflared(password=password)\n",
        "\n",
        "\n",
        "try:\n",
        "    if username:\n",
        "        pass\n",
        "    elif password:\n",
        "        pass\n",
        "except NameError:\n",
        "    print(\"User tidak di temukan, menggunakan username dan password dengan 'root'\")\n",
        "    username='root'\n",
        "    password='root'\n",
        "\n",
        "\n",
        "if Agro and Ngrok:\n",
        "    print(\"Anda tidak bisa memilih semuanya\")\n",
        "    print(\"Pilih hanya salah satu dari mereka\")\n",
        "elif Agro:\n",
        "    runAgro()\n",
        "elif Ngrok:\n",
        "    if ngrokToken == \"\":\n",
        "        print(\"Ngrok authtoken tidak ditemukan, harap masukkan dengan benar\")\n",
        "    else:\n",
        "        runNGROK()\n",
        "else:\n",
        "    print(\"Pilih salah satu saja\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "cellView": "form",
        "id": "ACBdf84keky4"
      },
      "source": [
        "#@title **Colab Shutdown**\n",
        "\n",
        "#@markdown untuk mematikan NGROK\n",
        "NGROK = False #@param {type:'boolean'}\n",
        "\n",
        "#@markdown Untuk Melepas GDrive\n",
        "GDrive = False #@param {type:'boolean'}\n",
        "\n",
        "#@markdown Untuk Membuat colab Istirahat\n",
        "Sleep = True #@param {type:'boolean'}\n",
        "\n",
        "if NGROK:\n",
        "    ! killall ngrok\n",
        "\n",
        "if GDrive:\n",
        "    with open('/content/unmount.py', 'w') as unmount:\n",
        "        unmount.write(\"\"\"from google.colab import drive\n",
        "drive.flush_and_unmount()\"\"\")\n",
        "    \n",
        "    try:\n",
        "        if user:\n",
        "            ! runuser $user -c 'python3 /content/unmount.py'\n",
        "    except NameError:\n",
        "        print(\"Tidak terpasang dengan google drive\")\n",
        "\n",
        "if Sleep:\n",
        "    from time import sleep\n",
        "    sleep(43200)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
